//! Code autogenerated from <https://unicode.org/Public/MAPPINGS/VENDORS/>
//! See binary codegen crate
use crate::{CodePage, DecodeError, EncodeError};
use crate::internal::{Encoder, UTF8Entry, UTF8Len};
use crate::internal::decoder_incomplete::decode_helper_non_ascii;
use std::borrow::Cow;
impl CP037 {
    /// Decode CP037 byte-encoding into UTF-8 string
    ///
    /// Undefined codepoints will result in [`DecodeError`]
    #[inline(always)]
    pub fn decode(self, bytes: &[u8]) -> Result<Cow<str>, DecodeError> {
        decode_helper_non_ascii(&DECODE_TABLE, bytes, None)
    }
    /// Decode CP037 byte-encoding into UTF-8 string
    ///
    /// Undefined codepoints will be replaced with `'�'`
    #[inline(always)]
    pub fn decode_lossy(self, bytes: &[u8]) -> Cow<str> {
        decode_helper_non_ascii(&DECODE_TABLE, bytes, Some('�')).unwrap()
    }
    /// Decode CP037 byte-encoding into UTF-8 string
    ///
    /// Undefined codepoints will be replaced with `fallback` char.
    ///
    /// Note that the `fallback` char should be less than 4 bytes in UTF8, otherwise it will panic at the start of the function.
    /// Refrain from using emojis as fallback
    #[inline(always)]
    pub fn decode_lossy_fallback(self, bytes: &[u8], fallback: char) -> Cow<str> {
        decode_helper_non_ascii(&DECODE_TABLE, bytes, Some(fallback)).unwrap()
    }
    /// Encode UTF-8 string into CP037 byte-encoding
    ///
    /// Undefined characters will result in [`EncodeError`]
    #[inline(always)]
    pub fn encode(self, s: &str) -> Result<Cow<[u8]>, EncodeError> {
        self.encode_helper(s, None)
    }
    /// Encode UTF-8 string into CP037 byte-encoding
    ///
    /// Undefined characters will be replaced with byte `fallback`
    #[inline(always)]
    pub fn encode_lossy(self, s: &str, fallback: u8) -> Cow<[u8]> {
        self.encode_helper(s, Some(fallback)).unwrap()
    }
}
#[derive(Copy, Clone)]
pub struct CP037;
impl CodePage for CP037 {
    #[inline(always)]
    fn decode<'a>(&self, bytes: &'a [u8]) -> Result<Cow<'a, str>, DecodeError> {
        (*self).decode(bytes)
    }
    #[inline(always)]
    fn decode_lossy<'a>(&self, bytes: &'a [u8]) -> Cow<'a, str> {
        (*self).decode_lossy(bytes)
    }
    /// Note that the `fallback` char should be less than 4 bytes in UTF8.
    /// 4 bytes UTF8 will panic because of assertion.
    /// Refrain from using emojis as fallback
    #[inline(always)]
    fn decode_lossy_fallback<'a>(
        &self,
        bytes: &'a [u8],
        fallback: char,
    ) -> Cow<'a, str> {
        (*self).decode_lossy_fallback(bytes, fallback)
    }
}
const DECODE_TABLE: crate::internal::decoder_incomplete::Table = [
    Some(UTF8Entry {
        buf: [0x0, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x2, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x5, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x6, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x7, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x8, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x9, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xA, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xB, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xD, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xE, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xF, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x10, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x11, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x12, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x13, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x14, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x15, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x16, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x17, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x18, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x19, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x1F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(UTF8Entry {
        buf: [0x20, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA0, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA2, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA4, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA0, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA1, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA3, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA5, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA7, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB1, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA2, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x2E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x28, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x2B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x7C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x26, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA9, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xAA, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xAB, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA8, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xAD, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xAE, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xAF, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xAC, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x9F, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x21, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x24, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x2A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x29, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xAC, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x2D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x2F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x82, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x84, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x80, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x81, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x83, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x85, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x87, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x91, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA6, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x2C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x25, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x5F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB8, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x89, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x8A, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x8B, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x88, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x8D, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x8E, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x8F, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x8C, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x60, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x23, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x40, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x27, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x3D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x22, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x98, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x61, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x62, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x63, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x64, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x65, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x66, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x67, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x68, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x69, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xAB, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xBB, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB0, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xBD, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xBE, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB1, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB0, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x6A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x6B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x6C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x6D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x6E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x6F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x70, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x71, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x72, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xAA, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xBA, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xA6, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB8, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x86, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA4, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB5, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x7E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x73, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x74, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x75, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x76, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x77, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x78, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x79, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x7A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA1, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xBF, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x90, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x9D, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x9E, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xAE, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x5E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA3, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA5, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB7, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA9, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA7, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB6, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xBC, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xBD, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xBE, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x5B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x5D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xE2, 0x80, 0xBE],
        len: UTF8Len::Three,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xA8, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB4, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x97, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x7B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x41, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x42, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x43, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x44, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x45, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x46, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x47, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x48, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x49, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xAD, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB4, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB6, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB2, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB3, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB5, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x7D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4B, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4D, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4E, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x4F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x50, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x51, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x52, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB9, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xBB, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xBC, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB9, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xBA, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xBF, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x5C, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0xB7, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x53, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x54, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x55, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x56, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x57, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x58, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x59, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x5A, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB2, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x94, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x96, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x92, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x93, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x95, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x30, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x31, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x32, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x33, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x34, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x35, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x36, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x37, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x38, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0x39, 0x0, 0x0],
        len: UTF8Len::One,
    }),
    Some(UTF8Entry {
        buf: [0xC2, 0xB3, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x9B, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x9C, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x99, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0xC3, 0x9A, 0x0],
        len: UTF8Len::Two,
    }),
    Some(UTF8Entry {
        buf: [0x7F, 0x0, 0x0],
        len: UTF8Len::One,
    }),
];
impl Encoder for CP037 {
    #[doc(hidden)]
    #[inline]
    fn encode_grapheme(&self, bytes: &mut &[u8]) -> Option<u8> {
        let (&a, rest) = bytes.split_first().unwrap();
        Some(
            match (a, &bytes) {
                (0x0, _) => {
                    *bytes = rest;
                    0x0
                }
                (0x1, _) => {
                    *bytes = rest;
                    0x1
                }
                (0x2, _) => {
                    *bytes = rest;
                    0x2
                }
                (0x3, _) => {
                    *bytes = rest;
                    0x3
                }
                (0x4, _) => {
                    *bytes = rest;
                    0x4
                }
                (0x5, _) => {
                    *bytes = rest;
                    0x5
                }
                (0x6, _) => {
                    *bytes = rest;
                    0x6
                }
                (0x7, _) => {
                    *bytes = rest;
                    0x7
                }
                (0x8, _) => {
                    *bytes = rest;
                    0x8
                }
                (0x9, _) => {
                    *bytes = rest;
                    0x9
                }
                (0xA, _) => {
                    *bytes = rest;
                    0xa
                }
                (0xB, _) => {
                    *bytes = rest;
                    0xb
                }
                (0xC, _) => {
                    *bytes = rest;
                    0xc
                }
                (0xD, _) => {
                    *bytes = rest;
                    0xd
                }
                (0xE, _) => {
                    *bytes = rest;
                    0xe
                }
                (0xF, _) => {
                    *bytes = rest;
                    0xf
                }
                (0x10, _) => {
                    *bytes = rest;
                    0x10
                }
                (0x11, _) => {
                    *bytes = rest;
                    0x11
                }
                (0x12, _) => {
                    *bytes = rest;
                    0x12
                }
                (0x13, _) => {
                    *bytes = rest;
                    0x13
                }
                (0x14, _) => {
                    *bytes = rest;
                    0x14
                }
                (0x15, _) => {
                    *bytes = rest;
                    0x15
                }
                (0x16, _) => {
                    *bytes = rest;
                    0x16
                }
                (0x17, _) => {
                    *bytes = rest;
                    0x17
                }
                (0x18, _) => {
                    *bytes = rest;
                    0x18
                }
                (0x19, _) => {
                    *bytes = rest;
                    0x19
                }
                (0x1A, _) => {
                    *bytes = rest;
                    0x1a
                }
                (0x1B, _) => {
                    *bytes = rest;
                    0x1b
                }
                (0x1C, _) => {
                    *bytes = rest;
                    0x1c
                }
                (0x1D, _) => {
                    *bytes = rest;
                    0x1d
                }
                (0x1E, _) => {
                    *bytes = rest;
                    0x1e
                }
                (0x1F, _) => {
                    *bytes = rest;
                    0x1f
                }
                (0x20, _) => {
                    *bytes = rest;
                    0x40
                }
                (0x21, _) => {
                    *bytes = rest;
                    0x5a
                }
                (0x22, _) => {
                    *bytes = rest;
                    0x7f
                }
                (0x23, _) => {
                    *bytes = rest;
                    0x7b
                }
                (0x24, _) => {
                    *bytes = rest;
                    0x5b
                }
                (0x25, _) => {
                    *bytes = rest;
                    0x6c
                }
                (0x26, _) => {
                    *bytes = rest;
                    0x50
                }
                (0x27, _) => {
                    *bytes = rest;
                    0x7d
                }
                (0x28, _) => {
                    *bytes = rest;
                    0x4d
                }
                (0x29, _) => {
                    *bytes = rest;
                    0x5d
                }
                (0x2A, _) => {
                    *bytes = rest;
                    0x5c
                }
                (0x2B, _) => {
                    *bytes = rest;
                    0x4e
                }
                (0x2C, _) => {
                    *bytes = rest;
                    0x6b
                }
                (0x2D, _) => {
                    *bytes = rest;
                    0x60
                }
                (0x2E, _) => {
                    *bytes = rest;
                    0x4b
                }
                (0x2F, _) => {
                    *bytes = rest;
                    0x61
                }
                (0x30, _) => {
                    *bytes = rest;
                    0xf0
                }
                (0x31, _) => {
                    *bytes = rest;
                    0xf1
                }
                (0x32, _) => {
                    *bytes = rest;
                    0xf2
                }
                (0x33, _) => {
                    *bytes = rest;
                    0xf3
                }
                (0x34, _) => {
                    *bytes = rest;
                    0xf4
                }
                (0x35, _) => {
                    *bytes = rest;
                    0xf5
                }
                (0x36, _) => {
                    *bytes = rest;
                    0xf6
                }
                (0x37, _) => {
                    *bytes = rest;
                    0xf7
                }
                (0x38, _) => {
                    *bytes = rest;
                    0xf8
                }
                (0x39, _) => {
                    *bytes = rest;
                    0xf9
                }
                (0x3A, _) => {
                    *bytes = rest;
                    0x7a
                }
                (0x3B, _) => {
                    *bytes = rest;
                    0x5e
                }
                (0x3C, _) => {
                    *bytes = rest;
                    0x4c
                }
                (0x3D, _) => {
                    *bytes = rest;
                    0x7e
                }
                (0x3E, _) => {
                    *bytes = rest;
                    0x6e
                }
                (0x3F, _) => {
                    *bytes = rest;
                    0x6f
                }
                (0x40, _) => {
                    *bytes = rest;
                    0x7c
                }
                (0x41, _) => {
                    *bytes = rest;
                    0xc1
                }
                (0x42, _) => {
                    *bytes = rest;
                    0xc2
                }
                (0x43, _) => {
                    *bytes = rest;
                    0xc3
                }
                (0x44, _) => {
                    *bytes = rest;
                    0xc4
                }
                (0x45, _) => {
                    *bytes = rest;
                    0xc5
                }
                (0x46, _) => {
                    *bytes = rest;
                    0xc6
                }
                (0x47, _) => {
                    *bytes = rest;
                    0xc7
                }
                (0x48, _) => {
                    *bytes = rest;
                    0xc8
                }
                (0x49, _) => {
                    *bytes = rest;
                    0xc9
                }
                (0x4A, _) => {
                    *bytes = rest;
                    0xd1
                }
                (0x4B, _) => {
                    *bytes = rest;
                    0xd2
                }
                (0x4C, _) => {
                    *bytes = rest;
                    0xd3
                }
                (0x4D, _) => {
                    *bytes = rest;
                    0xd4
                }
                (0x4E, _) => {
                    *bytes = rest;
                    0xd5
                }
                (0x4F, _) => {
                    *bytes = rest;
                    0xd6
                }
                (0x50, _) => {
                    *bytes = rest;
                    0xd7
                }
                (0x51, _) => {
                    *bytes = rest;
                    0xd8
                }
                (0x52, _) => {
                    *bytes = rest;
                    0xd9
                }
                (0x53, _) => {
                    *bytes = rest;
                    0xe2
                }
                (0x54, _) => {
                    *bytes = rest;
                    0xe3
                }
                (0x55, _) => {
                    *bytes = rest;
                    0xe4
                }
                (0x56, _) => {
                    *bytes = rest;
                    0xe5
                }
                (0x57, _) => {
                    *bytes = rest;
                    0xe6
                }
                (0x58, _) => {
                    *bytes = rest;
                    0xe7
                }
                (0x59, _) => {
                    *bytes = rest;
                    0xe8
                }
                (0x5A, _) => {
                    *bytes = rest;
                    0xe9
                }
                (0x5B, _) => {
                    *bytes = rest;
                    0xba
                }
                (0x5C, _) => {
                    *bytes = rest;
                    0xe0
                }
                (0x5D, _) => {
                    *bytes = rest;
                    0xbb
                }
                (0x5E, _) => {
                    *bytes = rest;
                    0xb0
                }
                (0x5F, _) => {
                    *bytes = rest;
                    0x6d
                }
                (0x60, _) => {
                    *bytes = rest;
                    0x79
                }
                (0x61, _) => {
                    *bytes = rest;
                    0x81
                }
                (0x62, _) => {
                    *bytes = rest;
                    0x82
                }
                (0x63, _) => {
                    *bytes = rest;
                    0x83
                }
                (0x64, _) => {
                    *bytes = rest;
                    0x84
                }
                (0x65, _) => {
                    *bytes = rest;
                    0x85
                }
                (0x66, _) => {
                    *bytes = rest;
                    0x86
                }
                (0x67, _) => {
                    *bytes = rest;
                    0x87
                }
                (0x68, _) => {
                    *bytes = rest;
                    0x88
                }
                (0x69, _) => {
                    *bytes = rest;
                    0x89
                }
                (0x6A, _) => {
                    *bytes = rest;
                    0x91
                }
                (0x6B, _) => {
                    *bytes = rest;
                    0x92
                }
                (0x6C, _) => {
                    *bytes = rest;
                    0x93
                }
                (0x6D, _) => {
                    *bytes = rest;
                    0x94
                }
                (0x6E, _) => {
                    *bytes = rest;
                    0x95
                }
                (0x6F, _) => {
                    *bytes = rest;
                    0x96
                }
                (0x70, _) => {
                    *bytes = rest;
                    0x97
                }
                (0x71, _) => {
                    *bytes = rest;
                    0x98
                }
                (0x72, _) => {
                    *bytes = rest;
                    0x99
                }
                (0x73, _) => {
                    *bytes = rest;
                    0xa2
                }
                (0x74, _) => {
                    *bytes = rest;
                    0xa3
                }
                (0x75, _) => {
                    *bytes = rest;
                    0xa4
                }
                (0x76, _) => {
                    *bytes = rest;
                    0xa5
                }
                (0x77, _) => {
                    *bytes = rest;
                    0xa6
                }
                (0x78, _) => {
                    *bytes = rest;
                    0xa7
                }
                (0x79, _) => {
                    *bytes = rest;
                    0xa8
                }
                (0x7A, _) => {
                    *bytes = rest;
                    0xa9
                }
                (0x7B, _) => {
                    *bytes = rest;
                    0xc0
                }
                (0x7C, _) => {
                    *bytes = rest;
                    0x4f
                }
                (0x7D, _) => {
                    *bytes = rest;
                    0xd0
                }
                (0x7E, _) => {
                    *bytes = rest;
                    0xa1
                }
                (0x7F, _) => {
                    *bytes = rest;
                    0xff
                }
                (0xC2, [_, b, ..]) => {
                    *bytes = &bytes[2..];
                    match b {
                        0xA0 => 0x41,
                        0xA2 => 0x4A,
                        0xAC => 0x5F,
                        0xA6 => 0x6A,
                        0xAB => 0x8A,
                        0xBB => 0x8B,
                        0xB1 => 0x8F,
                        0xB0 => 0x90,
                        0xAA => 0x9A,
                        0xBA => 0x9B,
                        0xB8 => 0x9D,
                        0xA4 => 0x9F,
                        0xB5 => 0xA0,
                        0xA1 => 0xAA,
                        0xBF => 0xAB,
                        0xAE => 0xAF,
                        0xA3 => 0xB1,
                        0xA5 => 0xB2,
                        0xB7 => 0xB3,
                        0xA9 => 0xB4,
                        0xA7 => 0xB5,
                        0xB6 => 0xB6,
                        0xBC => 0xB7,
                        0xBD => 0xB8,
                        0xBE => 0xB9,
                        0xA8 => 0xBD,
                        0xB4 => 0xBE,
                        0xAD => 0xCA,
                        0xB9 => 0xDA,
                        0xB2 => 0xEA,
                        0xB3 => 0xFA,
                        _ => return None,
                    }
                }
                (0xC3, [_, b, ..]) => {
                    *bytes = &bytes[2..];
                    match b {
                        0xA2 => 0x42,
                        0xA4 => 0x43,
                        0xA0 => 0x44,
                        0xA1 => 0x45,
                        0xA3 => 0x46,
                        0xA5 => 0x47,
                        0xA7 => 0x48,
                        0xB1 => 0x49,
                        0xA9 => 0x51,
                        0xAA => 0x52,
                        0xAB => 0x53,
                        0xA8 => 0x54,
                        0xAD => 0x55,
                        0xAE => 0x56,
                        0xAF => 0x57,
                        0xAC => 0x58,
                        0x9F => 0x59,
                        0x82 => 0x62,
                        0x84 => 0x63,
                        0x80 => 0x64,
                        0x81 => 0x65,
                        0x83 => 0x66,
                        0x85 => 0x67,
                        0x87 => 0x68,
                        0x91 => 0x69,
                        0xB8 => 0x70,
                        0x89 => 0x71,
                        0x8A => 0x72,
                        0x8B => 0x73,
                        0x88 => 0x74,
                        0x8D => 0x75,
                        0x8E => 0x76,
                        0x8F => 0x77,
                        0x8C => 0x78,
                        0x98 => 0x80,
                        0xB0 => 0x8C,
                        0xBD => 0x8D,
                        0xBE => 0x8E,
                        0xA6 => 0x9C,
                        0x86 => 0x9E,
                        0x90 => 0xAC,
                        0x9D => 0xAD,
                        0x9E => 0xAE,
                        0x97 => 0xBF,
                        0xB4 => 0xCB,
                        0xB6 => 0xCC,
                        0xB2 => 0xCD,
                        0xB3 => 0xCE,
                        0xB5 => 0xCF,
                        0xBB => 0xDB,
                        0xBC => 0xDC,
                        0xB9 => 0xDD,
                        0xBA => 0xDE,
                        0xBF => 0xDF,
                        0xB7 => 0xE1,
                        0x94 => 0xEB,
                        0x96 => 0xEC,
                        0x92 => 0xED,
                        0x93 => 0xEE,
                        0x95 => 0xEF,
                        0x9B => 0xFB,
                        0x9C => 0xFC,
                        0x99 => 0xFD,
                        0x9A => 0xFE,
                        _ => return None,
                    }
                }
                (0xE2, [_, b, c, ..]) => {
                    *bytes = &bytes[3..];
                    match b {
                        0x80 => {
                            match c {
                                0xBE => 0xBC,
                                _ => return None,
                            }
                        }
                        _ => return None,
                    }
                }
                (0xC2..=0xDF, _) => {
                    *bytes = &bytes[2..];
                    return None;
                }
                (0xE0..=0xEF, _) => {
                    *bytes = &bytes[3..];
                    return None;
                }
                (0xF0..=0xF4, _) => {
                    *bytes = &bytes[4..];
                    return None;
                }
                _ => panic!(),
            },
        )
    }
    #[inline]
    fn is_ebcdic(&self) -> bool {
        true
    }
}
